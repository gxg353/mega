['mega-1.0', {'/mega_client/__init__.py': "# -*- coding:utf-8 -*-\n'''\nCreated on Jul 21, 2014\n\n@author: xchliu\n\n@module:mega_service.mega_client.__init__\n'''\n"}, {'/mega_client/client_main.py': '# -*- coding:utf-8 -*-\n\'\'\'\nCreated on Jul 29, 2014\n\n@author: xchliu\n\n@module:mega_service.mega_client.client_main\n\'\'\'\nimport datetime\nfrom listener import tcp_server\nfrom logs import Logger\n\n\nMODEL=\'ClientMain\'\nlog = Logger(MODEL).log()\n\n\n\ndef main(): \n    log.info("=============BEGIN===========")\n    log.info(\'Mega Client server start at %s \' % datetime.datetime.now())\n    tcp_server()\n    \nif __name__==\'__main__\':\n    main()'}, {'/mega_client/listener.py': '# -*- coding: UTF-8 -*-\nimport sys\nimport SocketServer\nfrom SocketServer import StreamRequestHandler as SRH\nfrom setting import TCP_HOST,TCP_PORT\nfrom logs import Logger\nfrom worker import Worker\n\nEND_SIGN=\'EOF\'\nERROR=\'-1\'\nSUCCESS=\'0\'\nTCP_HEADER=[\'HEAD\',\'MEGA\']\nBUFFER_SIZE=10\nHEADER_LENGTH=10\n\nMODEL=\'Listener\'\nlog = Logger(MODEL).log()\n \nclass Servers(SRH):\n    def handle(self):\n        log.debug(\'Get connection from %s\' % str(self.client_address))\n        global q\n        result=\'\'\n        data=\'\'\n        header=\'\'\n        \n        header=int(self.request.recv(HEADER_LENGTH))\n        while header>0:\n            _d= self.request.recv(BUFFER_SIZE)\n            data+=_d\n            if _d.find(END_SIGN) > 0:\n                break\n            header=header-BUFFER_SIZE\n#            print header,_d\n        data=data.replace(\'EOF\', \'\')\n        log.debug(data)\n        if self.data_check(data):\n            _w=Worker(data).run()\n            result=str(_w)\n        else:\n            result=ERROR\n#todo : \n#    get the len(result),add the length to the head of packget, \n#    chancel the end sign\n        _len=len(result)+HEADER_LENGTH\n        _header=str(_len)\n        for i in range(HEADER_LENGTH - len(str(_len))):\n            _header=\'0\'+_header\n        self.request.sendall(_header+result+END_SIGN)\n            \n    def data_check(self,data):\n        if len(data) == 0:\n            return False\n        try:\n            if eval(data).get(TCP_HEADER[0]).upper() != TCP_HEADER[1]:\n                return False\n        except:\n            return False\n        return True\n        \ndef tcp_server(host=TCP_HOST,port=TCP_PORT):\n    addr = (host,port)\n    log.info(\'TCP Server listen on %s ...\' % str(addr))\n    try:  \n        server = SocketServer.ThreadingTCPServer(addr,Servers)\n        server.serve_forever()\n    except Exception as ex:\n        log.error(\'TCP server start failed as: %s\',ex)\n        sys.exit(1)\n\n\nif __name__=="__main__":\n    tcp_server()'}, {'/mega_client/logs.py': 'import logging\ntry:\n    from setting import DEAFULT_LOG_DEBUG\n    from setting import LOG_FILE_NAME\nexcept:\n    DEAFULT_LOG_DEBUG=False\n    LOG_FILE_NAME=\'/tmp/mega-client.log\'\n\n\nclass Logger:\n    def __init__(self,model):\n        if DEAFULT_LOG_DEBUG :\n            self.level=0\n        else:\n            self.level=3    \n        self.model=model\n    def log(self):\n        LEVELS = {0: logging.DEBUG,\n                  3: logging.INFO,\n                  2: logging.WARNING,\n                  1: logging.ERROR}\n        level=LEVELS.get(self.level,logging.NOTSET)   \n        logging.basicConfig(level=level,\n                            filename=LOG_FILE_NAME,\n                            datefmt=\'%Y-%m-%d %H:%M:%S\',\n                            format=\'%(asctime)s %(name)-12s %(levelname)-5s %(message)s\')\n        logger=logging.getLogger(self.model)\n        return logger\nif __name__=="__main__":\n    log=Logger(\'test\').log()\n    log.error("error")\n'}, {'/mega_client/mega-client.py': '\'\'\'\nCreated on Jun 20, 2014\n\n@author: xchliu\n\'\'\'\n\nimport sys, os, time, atexit\napp_path=os.path.dirname(sys.path[0])\nsys.path.append(app_path)\nfrom signal import SIGTERM\nfrom client_main import main as client_main\nfrom setting import DAEMON_PID,DAEMON_LOG\n\n\nclass Daemon:\n    def __init__(self, pidfile, stderr=DAEMON_LOG, stdout=DAEMON_LOG, stdin=\'/dev/null\'):\n        self.stdin = stdin\n        self.stdout = stdout\n        self.stderr = stderr\n        self.pidfile = pidfile\n\n    def _daemonize(self):\n        try:\n            pid = os.fork()\n            if pid > 0:\n                sys.exit(0)\n        except OSError, e:\n            sys.stderr.write("fork #1 failed: %d (%s)\\n" % (e.errno, e.strerror))\n            sys.exit(1)\n        os.setsid()\n        os.chdir("/")\n        os.umask(0)\n        try:\n            pid = os.fork()\n            if pid > 0:\n                sys.exit(0)\n        except OSError, e:\n            sys.stderr.write("fork #2 failed: %d (%s)\\n" % (e.errno, e.strerror))\n            sys.exit(1)\n        sys.stdout.flush()\n        sys.stderr.flush()\n        si = file(self.stdin, \'r\')\n        so = file(self.stdout, \'a+\')\n        se = file(self.stderr, \'a+\', 0)\n        os.dup2(si.fileno(), sys.stdin.fileno())\n        os.dup2(so.fileno(), sys.stdout.fileno())\n        os.dup2(se.fileno(), sys.stderr.fileno())\n\n        atexit.register(self.delpid)\n        pid = str(os.getpid())\n        file(self.pidfile,\'w+\').write("%s\\n" % pid)\n        \n    def delpid(self):\n        return\n        os.remove(self.pidfile)\n    #===========================================================================\n    # start\n    #===========================================================================\n    def start(self):\n        \n        """\n        Start the daemon\n        """\n        # Check for a pidfile to see if the daemon already runs\n        try:\n            pf = file(self.pidfile,\'r\')\n            pid = pf.read().strip()\n            pf.close()\n        except IOError:\n            pid = None\n\n        if pid:\n            message = "pidfile %s already exist. Daemon already running?\\n"\n            sys.stderr.write(message % self.pidfile)\n            sys.exit(1)\n        # Start the daemon\n        self._daemonize()\n        self._run()\n        \n    def stop(self):\n        # Get the pid from the pidfile\n        try:\n            pf = file(self.pidfile,\'r\')\n            pid = pf.readlines()\n            pf.close()\n        except IOError:\n            pid = None\n\n        if not pid:\n            message = "pidfile %s does not exist. Daemon not running?\\n"\n            sys.stderr.write(message % self.pidfile)\n            return # not an error in a restart\n        # Try killing the daemon process            \n        try:\n            while 1:\n                for p in pid:\n                    os.kill(int(p.strip()), SIGTERM)\n                    time.sleep(0.1)\n        except OSError, err:    \n            err = str(err)\n            if err.find("No such process") > 0:\n                if os.path.exists(self.pidfile):\n                    os.remove(self.pidfile)\n            else:\n                print str(err)\n                sys.exit(1)\n        \n    def restart(self):\n        self.stop()\n        self.start()\n        \n    def _run(self):\n        \'\'\'\n        Call the main service ,put the child pid into pid file\n        \'\'\'\n        child_pid=client_main()\n        \n        for pid in child_pid:\n            file(self.pidfile,\'a+\').write("%s\\n" % pid)\n        \nif __name__ == "__main__":\n    daemon = Daemon(DAEMON_PID)\n    if len(sys.argv) == 2:\n        if \'start\' == sys.argv[1]:\n            daemon.start()\n        elif \'stop\' == sys.argv[1]:\n            daemon.stop()\n        elif \'restart\' == sys.argv[1]:\n            daemon.restart()\n        else:\n            sys.exit(2)\n        sys.exit(0)\n    else:\n        print "usage: %s start|stop|restart" % sys.argv[0]\n        sys.exit(2)\n'}, {'/mega_client/sender.py': '# -*- coding: UTF-8 -*-\n\'\'\'\nCreated on Jul 1, 2014\n\n@author: xchliu\n\n\'\'\'\n\nimport socket\nimport types\nfrom logs import Logger\n\n\nMODEL=\'Sender\'\nlog = Logger(MODEL).log()\n\n\nTCP_HEADER={\'HEAD\':\'MEGA\'}\nEND_SIGN=\'EOF\'\nBUFFER_SIZE=10\nDEFAULT_NONE=0\nHEADER_LENGTH=10\n\n\nclass MegaClient():\n    \'\'\'\n        Client for mega servcie .\n        return a list d:\n            * if all runs success ,the list contain all the data required\n            * else only a 0 in the list means something goes into failure\n        code example: \n            cmd=\'get_all_instance\'\n                c=MegaClient(cmd=cmd)\n                if c:\n                    data=c.run(func_args="model=\'backup\',stat=1,role=1",CYCLE=1)\n                    c.close()\n                    return data\n    \'\'\'\n    HOST=\'localhost\'\n    PORT=1105\n    def __init__(self,host=HOST,port=PORT,cmd=\'\'):\n        self._cmd={}\n        self.host=host\n        self.port=port\n        \n        if cmd:\n            self._cmd[\'VALUE\']=str(cmd)\n    \n    def run(self,func_args=None,**args):\n        if not self._cmd:\n            return False\n        _d=[]\n        if self.conn():\n            if func_args:\n                self._cmd[\'ARGS\']=str(func_args)\n            if len(args)>0:\n                self._cmd=dict(self._cmd,**args)            \n            _d.append(1)\n            _d.append(self.cmd_run(self._cmd))\n        else:\n            _d.append(0)\n        if _d[0] == 1:\n            return _d[1]\n        else:\n            return _d[0]\n    \n    def conn(self):\n        try:\n            self.s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)      \n            self.s.connect((self.host,self.port))\n            return True\n        except Exception as ex:\n            log.error(ex)\n            return False\n    \n    def cmd_run(self,cmd=None):\n        if not cmd:\n            return False\n        data=\'\'\n        _header=\'\'\n        try:\n            cmd_with_pack=self._cmd_pack(cmd)\n            if cmd_with_pack:\n                _len=len(str(cmd_with_pack))+HEADER_LENGTH\n                _header=str(_len)\n                for i in range(HEADER_LENGTH - len(str(_len))):\n                    _header=\'0\'+_header\n                self.s.sendall(_header+str(cmd_with_pack)+END_SIGN)\n                header=int(self.s.recv(HEADER_LENGTH))\n                while header>0:\n                    _d=self.s.recv(BUFFER_SIZE)\n                    data+=_d\n                    if _d.find(END_SIGN) > 0:\n                        break\n                    header=header-HEADER_LENGTH\n            return self._data_unpack(data)\n        except Exception as ex:\n            log.error(ex)\n            return \'\'\n    \n    def _cmd_pack(self,data):\n        \'\'\'\n        keys:\n        *   TYPE:    0 internal server task,1 remote task\n        *   VALUE:    func name which be called\n        *   TIME:    when to do : 0 once  , relay to the CYCLE\n            CYCLE:  lifecycle of job   day,week,month\n            TARGET:    unique identify for server or instance or database.\n            ARGS:    args for the api func\n            TOOL:    Internal func calls\n        \'\'\'\n        _d=None\n        if type(data) == types.DictionaryType:\n            _d=dict(TCP_HEADER,**data)\n        elif type(data) == types.StringType:\n            _d=dict(TCP_HEADER,**eval(data))\n        else:\n            _d={}\n        _item=[\'TYPE\',\'TIME\',\'VALUE\',\'CYCLE\',\'TARGET\',\'ARGS\']\n        for _i in _item:\n            if not _d.get(_i):\n                _d[_i]=DEFAULT_NONE            \n        return _d\n    \n    def _data_unpack(self,data):\n        if not data:\n            return \'\'\n        return data.replace(END_SIGN,\'\')\n    \n    def close(self):\n        self.s.close()   \n\n\nclass MegaTool():\n\n    def __init__(self):\n        pass\n\n    def get_all_funcs(self):\n        cmd=\'get_all_funcs\'\n        self.c=MegaClient(cmd=cmd)\n        func_list=self.c.run(TOOL=True)\n        if func_list:\n            i=1\n            for f in eval(func_list):\n                print i,f[\'name\'],f[\'args\']\n                i+=1\n        self.close()\n    \n    def close(self):\n        self.c.close\n\ndef get_help():\n    print \'usage:\'\n    print \'python sender.py [help] -get this doc\'\n    print \'python sender.py list -get all the supported fucntion and description\'\n    print  MegaClient().__doc__\n    \n\nif __name__=="__main__":\n    import sys\n    cmd=\'\'\n    if len(sys.argv)>1:\n        cmd=sys.argv[1]\n        if cmd.upper()==\'LIST\':\n            t=MegaTool()\n            t.get_all_funcs()\n#for test\n        elif cmd.upper() == \'HELP\' or \'-H\':\n            get_help()\n        else:\n            cmd=\'get_all_instance\'\n            c=MegaClient(cmd=cmd)\n            if c:\n                print c.run(func_args="model=\'backup\',stat=1,role=1",CYCLE=1)\n                c.close()\n    else:\n        get_help()\n'}, {'/mega_client/setting.py': "# -*- coding:utf-8 -*-\n'''\nCreated on Jul 29, 2014\n\n@author: xchliu\n\n@module:mega_service.mega_client.setting\n\n'''\n\nTCP_HOST=''  # default 0.0.0.0\nTCP_PORT=1105\n\nSCRIPT_DIR='./script/'\n\nDEAFULT_LOG_DEBUG=True\nLOG_FILE_NAME='/var/log/mega/mega-client.log'\n\nDAEMON_PID='/var/run/mega_client.pid'\nDAEMON_LOG=LOG_FILE_NAME\n\nDEFAULT_TARGET='cmd'"}, {'/mega_client/upgrade.py': "# -*- coding:utf-8 -*-\n'''\nCreated on Jul 30, 2014\n\n@author: xchliu\n\n@module:mega_service.mega_client.upgrade\n'''\n\nfrom logs import Logger\nfrom sender import MegaClient\n\nMODEL='Upgrade'\nlog = Logger(MODEL).log()\n\nclass Upgrade():\n    \n    def __init__(self):\n        self.cmd='client_upgrade'\n        self.c=MegaClient(cmd=self.cmd)\n    \n    def _run(self):\n        \n        self.c.run()"}, {'/mega_client/worker.py': '# -*- coding:utf-8 -*-\n\'\'\'\nCreated on Jul 29, 2014\n\n@author: xchliu\n\n@module:mega_service.mega_client.worker\n\'\'\'\nimport commands\n\nfrom setting import SCRIPT_DIR,DEFAULT_TARGET\n\nfrom logs import Logger\n\n\nMODEL=\'Worker\'\nlog = Logger(MODEL).log()\n\n\nclass Worker():\n    \n    def __init__(self,cmd):\n        self.cmd=cmd\n        self.error=\'\'\n        self.error_code=0\n        self.data={}\n        \n    def _work_resolve(self):\n        \'\'\'\n            {\'TARGET\': \'python\', \'ARGS\': "{\'ip\': u\'localhost\', \'version\': u\'5.6\', \'id\': 12L, \'port\': 3310L}", \n            \'VALUE\': \'test.py\', \'TIME\': 0, \'TYPE\': 0, \'CYCLE\': 0}\n        \'\'\'\n        _item=[\'TYPE\',\'TIME\',\'VALUE\',\'CYCLE\',\'TARGET\',\'ARGS\']\n        _data={}\n        self.cmd=eval(self.cmd)\n        for i in _item:\n            _data[i]=self.cmd.get(i,None)\n        if not _data[\'VALUE\']:\n            return False\n        if not _data[\'TARGET\']:\n            _data[\'TARGET\']=DEFAULT_TARGET\n        self.data=_data\n        log.debug(self.data)\n        return True\n        \n    def run(self):\n        if not self._work_resolve():\n            return self.error_code,self.error\n        _type=self.data[\'TARGET\']\n        if  _type== \'cmd\':\n            _type=\'\'\n        _cmd="%s %s%s \\"%s\\" " % (_type,SCRIPT_DIR,self.data[\'VALUE\'],self.data[\'ARGS\'])\n        log.debug(_cmd)\n        status,output=commands.getstatusoutput(_cmd)\n        if status <>0:\n            log.error(str(status)+\' : \'+output)\n        return status,output'}, {'/mega_client/test/test.py': ''}]
